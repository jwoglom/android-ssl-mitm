
log_format main_json escape=json '{\n'
	'\t"msec":                     "$msec",                     \n'
	'\t"connection":               "$connection",               \n'
	'\t"connection_requests":      "$connection_requests",      \n'
	'\t"pid":                      "$pid",                      \n'
	'\t"request_id":               "$request_id",               \n'
	'\t"request_length":           "$request_length",           \n'
	'\t"remote_addr":              "$remote_addr",              \n'
	'\t"remote_user":              "$remote_user",              \n'
	'\t"remote_port":              "$remote_port",              \n'
	'\t"time_local":               "$time_local",               \n'
	'\t"time_iso8601":             "$time_iso8601",             \n'
	'\t"request":                  "$request",                  \n'
	'\t"request_uri":              "$request_uri",              \n'
	'\t"args":                     "$args",                     \n'
	'\t"host":                     "$host",                     \n'
	'\t"status":                   "$status",                   \n'
	'\t"body_bytes_sent":          "$body_bytes_sent",          \n'
	'\t"bytes_sent":               "$bytes_sent",               \n'
	'\t"http_referer":             "$http_referer",             \n'
	'\t"http_user_agent":          "$http_user_agent",          \n'
	'\t"http_x_forwarded_for":     "$http_x_forwarded_for",     \n'
	'\t"http_host":                "$http_host",                \n'
	'\t"server_name":              "$server_name",              \n'
	'\t"request_time":             "$request_time",             \n'
	'\t"upstream":                 "$upstream_addr",            \n'
	'\t"upstream_connect_time":    "$upstream_connect_time",    \n'
	'\t"upstream_header_time":     "$upstream_header_time",     \n'
	'\t"upstream_response_time":   "$upstream_response_time",   \n'
	'\t"upstream_response_length": "$upstream_response_length", \n'
	'\t"upstream_cache_status":    "$upstream_cache_status",    \n'
	'\t"ssl_protocol":             "$ssl_protocol",             \n'
	'\t"ssl_cipher":               "$ssl_cipher",               \n'
	'\t"scheme":                   "$scheme",                   \n'
	'\t"request_method":           "$request_method",           \n'
	'\t"server_protocol":          "$server_protocol",          \n'
	'\t"pipe":                     "$pipe",                     \n'
	'\t"gzip_ratio":               "$gzip_ratio",               \n'
	'\t"http_authorization":       "$http_authorization",       \n'
	'\t"request_body":             "$request_body",             \n'
	'\t"other": null\n'
'}\n';

error_log  /dev/stderr debug;
access_log /dev/stdout main_json ;

resolver 127.0.0.11 valid=1s ipv6=off local=on;
resolver_timeout 10s;

init_by_lua_block {
	os.execute("/docker-entrypoint.d/99-cert.sh");
}

map $ssl_server_name $ssl_domain_name {
	 volatile;
	 hostnames;
	 default 'example.org';
	~^((?<subdomain>.*)\.)(?<domain>[^.]+)\.(?<tld>[^.]+)$ $domain.$tld;
}

server {

	listen  80     default_server;
	listen 443 ssl default_server;

	ssl_ciphers ALL;
	ssl_protocols TLSv1.2 TLSv1.1 TLSv1 SSLv3 SSLv2 ;
	ssl_certificate     "/home/localhost.crt";
	ssl_certificate_key "/home/localhost.key";
	ssl_certificate     "/home/ssl/$ssl_domain_name.bundle.crt";
	ssl_certificate_key "/home/ssl/$ssl_domain_name.key";
	ssl_certificate_by_lua_block {
		local ssl = require "ngx.ssl"
		local ok, err = ssl.clear_certs();
		if not ok then
			ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates");
			return ngx.exit(ngx.ERROR);
		end

		local certpath = "/home/ssl/" .. ssl.server_name();
		os.execute("./ssl/issue.sh "  .. ssl.server_name() .. " 1>&2");

		local function mReadFile(file)
			local f = assert(io.open(file, "rb"));
			local d = f:read("*all");
			f:close();
			return d;
		end

		local pem_cert_chain = assert(mReadFile(certpath .. ".bundle.crt"));
		local der_cert_chain, err = ssl.cert_pem_to_der(pem_cert_chain);
		if not der_cert_chain then
			ngx.log(ngx.ERR, "failed to convert certificate chain ", "from PEM to DER: ", err);
			return ngx.exit(ngx.ERROR);
		end
		local ok, err = ssl.set_der_cert(der_cert_chain);
		if not ok then
			ngx.log(ngx.ERR, "failed to set DER cert: ", err);
			return ngx.exit(ngx.ERROR);
		end

		local pem_pkey = assert(mReadFile(certpath .. ".key"));
		local der_pkey, err = ssl.priv_key_pem_to_der(pem_pkey);
		if not der_pkey then
			ngx.log(ngx.ERR, "failed to convert private key ", "from PEM to DER: ", err)
			return ngx.exit(ngx.ERROR);
		end
		local ok, err = ssl.set_der_priv_key(der_pkey);
		if not ok then
			ngx.log(ngx.ERR, "failed to set DER private key: ", err);
			return ngx.exit(ngx.ERROR);
		end
	}

	underscores_in_headers on;
	client_max_body_size 0;
	proxy_http_version 1.1;
	proxy_read_timeout 10s;
	proxy_send_timeout 10s;
	proxy_connect_timeout 10s;
	proxy_intercept_errors on;
	proxy_request_buffering on;
	proxy_set_header connection "";
	proxy_set_header host ${http_host};
	proxy_pass_request_headers on;
	proxy_pass_request_body on;
	proxy_pass_header *;
	proxy_next_upstream_tries 99;
	proxy_next_upstream_timeout 10s;
	proxy_ssl_protocols TLSv1.2 TLSv1.1 TLSv1 SSLv3 SSLv2 ;
	proxy_ssl_server_name on;
	proxy_ssl_verify off;

	location / {
		# mirror /mirror;
		# mirror_request_body on;
		proxy_pass $scheme://$http_host$request_uri;
	}

	location = /mirror {
		internal;
		set $issuer certissuer:80;
		proxy_pass http://$issuer/htbin/issue.sh/certs/ssl/?$host;
	}

	# location = /test {
	# 	content_by_lua 'os.execute("date")';
	# }

}
